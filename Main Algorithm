# Quadcopter UDUM diving model

import matplotlib.pyplot as plt
import numpy as np
import math

# Given values
v_0 = 40  # m/s
v_mh = 200  # m/s
cd = 0.013  # drag coefficient
rho = 1.29  # air density in kg/m^3 (typical value at sea level)
csa = 0.25  # cross-sectional area, m^2
m = 10  # kg
t = 10  # seconds
e = 2.71828
g = 9.81  # m/s^2

# Basic equations
b = 0.5 * rho * csa * cd
f_mh = round(b * v_mh ** 2, 4)   # Projection of force of thrust max on horizontal axis in horizontal flight
f_t = round(np.sqrt(f_mh ** 2 + (m * g) ** 2), 4)   # Force of max thrust
q = m * g + f_t
t_0 = m * np.arctanh(v_0 * np.sqrt(b / q)) / np.sqrt(b * q)   # t_0(v_0)

# Making lists for plotting
time = []
velocity = []
angle = []
dist_angl = []

# Looping time in a range to build v(t) graph for vertical diving case
for t_loop in range(60):
    v = round((np.sqrt(q / b)) * np.tanh((np.sqrt(b * q) / m) * (t_loop + t_0)), 2)
    time.append(t_loop)
    velocity.append(v)

# Looping angle theta [0, pi] to change gravity impact. Finding distance traveled vs theta
for i in range(0, 181, 5):
    t = 10
    theta = np.radians(i)
    g_relative = round(9.81 * np.sin(theta), 4)   # g relative to theta
    f_t = round(np.sqrt(f_mh ** 2 + (m * g) ** 2), 4)
    f_dm = ((f_t * np.sin(theta))**2 + (f_mh * np.cos(theta))**2)**0.5   # vector of thrust to theta
    q = m * g_relative + f_dm
    dist = round(m * np.log(np.cosh((np.sqrt(b * q) / m) * (t + t_0)) /
                      np.cosh(t_0 * np.sqrt(b * q) / m)) / b)
    print("Distance travelled in", t, "seconds:", dist, "m", "with theta", -i, "degrees.")
    angle.append(np.degrees(theta))
    dist_angl.append(dist)

# Plot v(t), v_0 is considered in the equation
plt.plot(time, velocity, marker='o')
plt.title('Velocity vs Time')
plt.xlabel('Time (s)')
plt.ylabel('Velocity (m/s)')
plt.grid(True)
plt.show()

# Plot Pitch angle Theta vs Distance travelled, v_0 is considered in the calculation
angle = [-1 * i for i in angle]
theta = [math.radians(d) for d in angle]  # Convert degrees to radians for polar plot
plt.polar(theta, dist_angl, marker='o', linestyle='-')
plt.title('Pitch angle Theta vs Distance travelled (m)')
plt.show()
