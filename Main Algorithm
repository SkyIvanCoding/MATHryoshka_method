# Model of separation with UDUM rotary-wing aircraft via MATHryoshka method
# Euler method is used for finding velocity and distance_plnd travelled

import numpy as np
import matplotlib.pyplot as plt
import math

# Constants
m = 15  # mass, kg
v_mh = 89  # max horizontal velocity, m/s
csa = 0.4  # cross-sectional area, m^2
cd = 0.2  # drag coefficient
g = 9.81  # gravity, m/s^2
v_0 = 10  # initial velocity, m/s
rho = 1.225  # air density, kg/m^3 (sea level)
dim_cd = 2  # max dimension of the conventional drone, m
dim_udum = 1.5  # max dimension of the UDUM, m

dt = 0.01  # time step in seconds
num_steps = 1000 # number of time steps

# Arrays for storing values
time = np.zeros(num_steps)
velocity = np.zeros(num_steps)
position = np.zeros(num_steps)

# Initial conditions
velocity[0] = v_0
position[0] = 0
angle = []
velocity_list = []
distance_list = []
safety_dist = []

# Basic equations
b = 0.5 * rho * csa * cd
f_mh = round(b * (v_mh ** 2), 2)   # Projection of force of thrust max on horizontal axis in horizontal flight
f_t = round(np.sqrt(f_mh ** 2 + (m * g) ** 2), 2)   # Force of max thrust
dim_impact = 0.5 * (dim_cd + dim_udum)  # dimension impact of the aircraft

# Numerical integration via Euler method
for step in range(0, 361, 5):
    gamma = np.radians(step)
    f_dm = round(np.sqrt((f_t * np.sin(gamma)) ** 2 + (f_mh * np.cos(gamma)) ** 2), 2)
    angle.append(np.degrees(gamma))
    for i in range(1, num_steps):
        velocity[i] = velocity[i - 1] + (1 / m) * (f_dm - m * g * np.sin(gamma) - b * velocity[i - 1] ** 2
                                                   - b * velocity[i - 1]) * dt
        position[i] = position[i - 1] + velocity[i] * dt
        time[i] = time[i - 1] + dt   # for better time complexity use: time = 10
    velocity_list.append(velocity[-1])
    distance_list.append(position[-1] + dim_impact)
    # Multiply elements of distance_list by sqrt(2) to get safety_dist
    safety_dist = [i * np.sqrt(2) for i in distance_list]
    # Print the results
    if angle[-1] <= 90 and angle[-1] >= 0:
        print("Gamma (degrees):", round(angle[-1]), "Velocity (m/s):", round(velocity[-1], 1),
              "Minimum separation (m):", round(position[-1] + dim_impact, 1),
              "Safety area (m):", round(safety_dist[-1]))
    if angle[-1] <= 360 and angle[-1] >= 270:
        print("Gamma (degrees):", round(angle[-1] - 360), "Velocity (m/s):", round(velocity[-1], 1),
              "Minimum separation (m):", round(position[-1] + dim_impact, 1),
              "Safety area (m):", round(safety_dist[-1]))

# Plot flight path angle Gamma vs Distance travelled.
angle = [i for i in angle]
gamma = [math.radians(d) for d in angle]  # Convert degrees to radians for polar plot
plt.polar(gamma, distance_list, marker='o', linestyle='-', color='red')
plt.polar(gamma, safety_dist, marker='o', linestyle='-', color='gray')
plt.title('Flight path angle Gamma vs minimum separation (red) and safety area (gray)')
plt.show()

# Plot Velocity vs Time for Gamma = 0
plt.plot(time, velocity, marker='o')
plt.title('Velocity vs Time, Gamma = 0Â°')
plt.xlabel('Time (s)')
plt.ylabel('Velocity (m/s)')
plt.grid(True)
plt.show()
