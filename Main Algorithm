# Model of separation with UDUM quadcopter via MATHryoshka method

import numpy as np
import matplotlib.pyplot as plt
import math

# Constants
m = 6  # mass, kg
v_mh = 89  # max horizontal velocity, m/s
csa = 0.25  # cross-sectional area, m^2
cd = 0.013  # drag coefficient
g = 9.81  # gravity, m/s^2
v_0 = 40  # initial velocity, m/s
z_0 = 0  # initial height, meters
rho = 1.29  # air density, kg/m^3 (sea level)

dt = 0.01  # time step in seconds
num_steps = 1000  # number of time steps

# Arrays for storing values
time = np.zeros(num_steps)
velocity = np.zeros(num_steps)
position = np.zeros(num_steps)

# Initial conditions
velocity[0] = v_0
position[0] = z_0
angle = []
velocity_list = []
distance_list = []

# Basic equations
b = 0.5 * rho * csa * cd
f_mh = round(b * (v_mh ** 2), 2)   # Projection of force of thrust max on horizontal axis in horizontal flight
f_t = round(np.sqrt(f_mh ** 2 + (m * g) ** 2), 2)   # Force of max thrust

# Numerical integration via Euler method
for step in range(0, 361, 5):
    theta = np.radians(step)
    f_dm = round(np.sqrt((f_t * np.sin(theta))**2 + (f_mh * np.cos(theta))**2), 2)
    angle.append(np.degrees(theta))
    for i in range(1, num_steps):
        velocity[i] = velocity[i - 1] + (1 / m) * (f_dm + m * g * np.sin(theta) - b * velocity[i - 1]**2
                                                   - b * velocity[i - 1]) * dt
        position[i] = position[i - 1] + velocity[i] * dt
        time[i] = time[i - 1] + dt   # for better time complexity use: time = 10
    velocity_list.append(velocity[-1])
    distance_list.append(position[-1])
    # print("Theta:", angle[-1], "velocity:", velocity[-1], "position:", position[-1])

# Plot Pitch angle Theta vs Distance travelled, v_0 is considered in the calculation.
# For the ascending part, the distance traveled is significantly approximated.
angle = [-1 * i for i in angle]
theta = [math.radians(d) for d in angle]  # Convert degrees to radians for polar plot
plt.polar(theta, distance_list, marker='o', linestyle='-')
plt.title('Pitch angle Theta vs Distance travelled (m)')
plt.show()

# Plot Velocity vs time
plt.plot(time, velocity, marker='o')
plt.title('Velocity vs Time')
plt.xlabel('Time (s)')
plt.ylabel('Velocity (m/s)')
plt.grid(True)
plt.show()
